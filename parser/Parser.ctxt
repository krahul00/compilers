#BlueJ class context
comment0.params=scannertouse
comment0.target=Parser(scanner.Scanner)
comment0.text=\n\ This\ is\ the\ constructor\ for\ the\ Parser.\ It\ takes\ in\ a\ Scanner\ and\ \n\ stores\ it\ to\ an\ instance\ variable.\ Additionally,\ it\ calls\ the\ \n\ Scanner's\ next\ method,\ to\ set\ the\ pointer\ of\ currentToken\ to\ the\ \n\ first\ token.\n\ Usage\:\ Parser\ parser\ \=\ new\ Parser(scanner);\n\ @param\ scannertouse\ the\ scanner\ that\ is\ passed\ to\ the\ constructor\n
comment1.params=expectedtoken
comment1.target=void\ eat(java.lang.String)
comment1.text=\n\ The\ eat\ method\ takes\ in\ a\ String\ representing\ the\ expected\ token.\ \n\ If\ the\ expected\ token\ matches\ the\ current\ token,\ then\ eat\ asks\ the\n\ Scanner\ for\ the\ next\ token\ and\ stores\ that\ as\ the\ current\ token.\ \n\ @param\ expectedtoken\ the\ expectedtoken\ you\ compare\ to\ the\ currentToken\n\ Usage\:\ eat(currentToken);\n
comment2.params=
comment2.target=ast.Number\ parseNumber()
comment2.text=\n\ If\ the\ current\ token\ is\ an\ integer\ and\ parseNumber\ is\ called,\ the\ method\n\ will\ parse\ the\ token\ for\ the\ number\ value.\n\ Then,\ it\ will\ eat\ it\ and\ return\n\ the\ number\ in\ an\ instance\ of\ the\ Number\ class\n\ Usage\:\ parseNumber();\n\ @return\ a\ new\ instance\ of\ the\ Number\ class\n
comment3.params=
comment3.target=ast.Expression\ parseFactor()
comment3.text=\n\ parseFactor\ kicks\ in\ when\ there\ is\ a\ -,\ (,\ or\ a\ variable.\n\ If\ there\ a\ -,\ it\ multiplies\ a\ -1\ to\ the\ value\ of\ the\ recursively\n\ called\ expression\ by\ use\ of\ an\ instance\ of\ BinOp.\ If\ there\ is\ a\ '(',\n\ it\ eats\ that\ token\ and\ parses\ the\ value\ of\ the\ resulting\ expression.\n\ If\ there\ is\ a\ variable,\ it\ \n\ creates\ an\ instance\ of\ the\ Variable\ class.\ Else,\ it\ knows\ that\ the\ only\n\ option\ left\ is\ a\ number,\ so\ it\ parses\ it\ and\ returns\ the\ value.\n\ @return\ the\ parsed\ expression\ \n\ Usage\:\ parseFactor();\n
comment4.params=env
comment4.target=ast.Program\ parseProgram(environment.Environment)
comment4.text=\n\ This\ method\ should\ keep\ parsing\ procedure\ declarations\ \n\ long\ as\ the\ current\ token\ is\ PROCEDURE.\ Then\ it\ should\ parse\n\ a\ single\ statement.\n\ @param\ env\ passed\ environment\n\ @return\ Program\ object\ that\ has\ paresed\ all\ procedure\ declarations\n
comment5.params=c
comment5.target=boolean\ isLetter(char)
comment5.text=\n\ Takes\ in\ a\ char\ and\ returns\ a\ boolean\ depending\ on\n\ whether\ or\ not\ the\ character\ is\ a\ letter.\ \n\ @Usage\:\ isLetter(currentChar);\n\ @param\ c\ the\ currentChar\ that\ the\ method\ tries\ to\ identify\n\ whether\ or\ not\ it\ is\ a\ letter\n\ @return\ true\ if\ param\ is\ a\ letter\n\ \ \ \ \ \ \ \ \ false\ if\ param\ is\ not\ a\ letter\n
comment6.params=
comment6.target=ast.Statement\ parseStatement()
comment6.text=\n\ parseStatement()\ eats\ all\ tokens\ associated\ with\ the\ WRITELN\ \n\ statement.\ Additionally,\ parseStatement()\ uses\ the\ use\ of\ the\n\ Expression\ class\ to\ parse\ what\ is\ in\ the\ WRITELN.\ If\ its\ a\ WRITELN,\n\ it\ returns\ a\ instance\ of\ the\ WRITELN\ class.\ If\ there\ is\ a\ begin,\ it\ \n\ makes\ a\ instance\ of\ the\ Block\ class.\ If\ it\ is\ an\ IF\ statement,\ it\ creates\n\ an\ instance\ of\ the\ IF\ class,\ and\ so\ on\ with\ a\ WHILE\ statement.\ \n\ @return\ Statement\ statement\ that\ is\ parsed\n\ Usage\:\ parseStatement();\n
comment7.params=
comment7.target=ast.Expression\ parseTerm()
comment7.text=\n\ parseTerm()\ is\ enacted\ when\ there\ is\ a\ *\ or\ a\ /.\ If\ there\ is\ a\n\ *\ or\ /\ or\ %,\ it\ creates\ a\ BinOp.\ \ \n\ @return\ the\ parsed\ expression\n\ Usage\ parseTerm()\n
comment8.params=
comment8.target=ast.Expression\ parseExpression()
comment8.text=\n\ parseExpression()\ takes\ care\ of\ the\ situation\ when\ a\ '+'\ or\n\ a\ '-'\ is\ present.\ In\ essence,\ it\ creates\ a\ binOP\ as\ well\n\ @return\ It\ returns\ a\ parsed\ expressionw\n\ Usage\ parseExpression()\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\n\ Tester\ for\ the\ code\n\ @param\ args\ stack\n
numComments=10
